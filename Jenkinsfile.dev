pipeline {
    agent any

    environment {
        name = 'demo-app1'
        port = '8080:8080'
        ruta = 'D:/proyecto-spring/demo' 
        dockerRegistryCredentials = 'docker_credencial' // Utiliza el ID de tu credencial de Docker
    }

    stages {
        stage('Iniciar sesión en Docker') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: dockerRegistryCredentials, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        bat "docker login -u $DOCKER_USER -p $DOCKER_PASSWORD"
                        bat 'docker info'
                    }
                }
            }
        }
        stage('Eliminar contenedor con mismo name') {
             steps {
                    script {
                        dir(ruta){
                            // Verificar si el contenedor 'demo-app1' existe
                            def containerExists = bat(script: "docker ps -q -f name=${name}", returnStatus: true) == 0

                            // Si el contenedor existe, intentar detenerlo
                            if (containerExists) {
                                def stopResult = bat(script: "docker stop ${name}", returnStatus: true)
                                if (stopResult == 0) {
                                    echo 'El contenedor "demo-app1" se ha detenido con éxito.'
                                } else {
                                    error "Error al detener el contenedor 'demo-app1'."
                                }
                            } else {
                                echo 'El contenedor "demo-app1" no existe.'
                            }
                        }
                    }
                }
        }

        stage('Construir imagen') {
            steps {
                script {
                    dir(ruta) {
                        bat "docker build -t ${name} ."
                    }
                }
            }
        }

        stage('Docker images') {
            steps {
                script {
                    dir(ruta) {
                        bat 'docker images'
                    }
                }
            }
        }

        stage('Construir contenedor') {
            steps {
                script {
                    dir(ruta) {
                        bat "docker run -d --publish ${port} ${name}"
                    }
                }
            }
        }

        stage('Docker container') {
            steps {
                script {
                    dir(ruta){
                    bat 'docker ps'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Exito'
            }
        }
    }
}
